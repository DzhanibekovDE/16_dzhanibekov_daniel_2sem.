### Зачем нужно параллельное исполнение задач (5Б)

Параллельное исполнение задач позволяет одновременно выполнять 
несколько операций, что может значительно ускорить выполнение программ, 
особенно на многоядерных или многопроцессорных системах. 

Основные преимущества:

- Увеличение производительности: Эффективное использование 
множества ядер процессора для ускорения выполнения программы.
- Улучшенное реагирование системы: В интерактивных приложениях 
параллельное выполнение позволяет приложению оставаться отзывчивым, даже 
когда оно занято выполнением задач в фоновом режиме.
- Более эффективное использование ресурсов: Параллельное выполнение 
может повысить общую пропускную способность и эффективность системы, распределяя нагрузку равномерно.

### Что такое переключение контекста (5Б)

Переключение контекста - это процесс, при котором операционная система 
сохраняет контекст текущей выполняемой задачи и восстанавливает контекст 
другой задачи, готовой к выполнению. Это включает в себя сохранение и 
восстановление регистров процессора, указателей стека и других критически 
важных данных. Переключение контекста позволяет многозадачным операционным 
системам эффективно делить процессорное время между множеством задач, но 
также влечет за собой накладные расходы, связанные с сохранением и восстановлением контекстов.

### Процессы и потоки (5Б)

- Процессы: Независимые исполняемые единицы, имеющие свое собственное 
адресное пространство памяти. Каждый процесс изолирован от других процессов, что 
обеспечивает защиту и стабильность системы.

- Потоки: Единицы выполнения внутри процесса. Все потоки в одном процессе 
разделяют его адресное пространство и ресурсы, что позволяет им 
эффективно взаимодействовать и обмениваться данными.

### От чего зависит максимальный прирост производительности многопоточного алгоритма по сравнению с однопоточным? Почему реальный прирост меньше? (5Б)

Максимальный прирост производительности многопоточного алгоритма зависит от:

- Закона Амдала: Определяет максимально возможное ускорение 
программы за счет параллелизма, основываясь на доле кода, который 
может быть выполнен параллельно.
- Количество ядер процессора: Увеличение числа потоков сверх 
количества ядер процессора обычно не приводит к значительному 
приросту производительности из-за накладных расходов на переключение 
контекста и конкуренцию за ресурсы.
- Синхронизация и конкуренция за ресурсы: Блокировки и ожидание 
освобождения ресурсов могут значительно снизить эффективность многопоточности.

Реальный прирост обычно меньше максимально возможного из-за накладных 
расходов на управление потоками, синхронизацию, а также из-за неизбежного 
наличия участков кода, которые должны выполняться последовательно.

### Какие факторы необходимо учитывать при распараллеливании алгоритмов для увеличения производительности (5Б)

При распараллеливании алгоритмов необходимо учитывать следующие факторы:

- Разделение задач: Эффективное разделение задачи на независимые 
подзадачи, которые можно параллельно выполнить.
- Зависимость данных: Минимизация зависимостей данных между параллельными 
задачами для уменьшения необходимости синхронизации.
- Балансировка нагрузки: Равномерное распределение работы между потоками 
для предотвращения ситуаций, когда некоторые потоки простаивают, ожидая завершения работы других.
- Синхронизация и блокировки: Оптимизация использования механизмов 
синхронизации для минимизации времени ожидания и предотвращения взаимоблокировок.
- Накладные расходы: Оценка и минимизация накладных расходов, связанных с 
созданием, управлением и переключением потоков, а также с синхронизацией.
- Аппаратное обеспечение: Учет особенностей аппаратного обеспечения, таких как 
количество ядер процессора, иерархия памяти и пропускная способность шины данных.