### Инструменты, позволяющие процессам использовать общую память (5Б)

В C++ и сопутствующих библиотеках существуют различные инструменты для организации доступа к общей памяти:

- Boost.Interprocess предоставляет возможности для размещения объектов в общей памяти, доступной нескольким процессам.
- Shared Memory Objects (POSIX) позволяют различным процессам маппировать один и тот же сегмент памяти в их адресное пространство.
- Memory-mapped Files используются для создания общей памяти, сопоставляя файлы на диске с памятью, что позволяет нескольким процессам 
работать с данными файла как с общей памятью.
- Windows API (CreateFileMapping и MapViewOfFile) предлагает аналогичные механизмы для управления общей памятью в ОС Windows.

### Зачем нужны аллокаторы в Boost.Interprocess (5Б)

Аллокаторы в Boost.Interprocess используются для следующих целей:

- Эффективное управление памятью в общих сегментах: Аллокаторы специально разработаны для выделения и освобождения памяти в общих 
сегментах, что критично для синхронизации и управления памятью между процессами.
- Создание и уничтожение объектов в общей памяти: Обеспечивают создание объектов в правильном контексте памяти, что важно для их 
использования в разных процессах.
- Поддержка портабельности и корректности: Аллокаторы учитывают особенности общей памяти, такие как адресация и выравнивание, что 
важно для работы приложений в многопроцессорных и распределённых средах.

### Как процессы могут обнаружить один и тот-же анонимный примитив синхронизации (5Б)

Процессы могут обнаруживать анонимные примитивы синхронизации через следующие механизмы:

- Использование общей памяти: Примитив синхронизации создается в общей памяти, где он доступен всем процессам, которые могут его
идентифицировать.
- Посредством уникального ключа или имени

### Примитивы синхронизации (кроме мьютексов) (10Б)

- Семафоры: Управляют доступом к ресурсам, используя счётчик доступных ресурсов. Каждый раз, когда поток захватывает семафор, счётчик
 уменьшается, и наоборот, при освобождении увеличивается.
- Барьеры: Синхронизируют группу потоков в определённой точке выполнения. Все потоки должны достичь барьера, прежде чем они все смогут
продолжить выполнение.
- Условные переменные: Позволяют потокам ожидать, пока не изменятся определённые условия. Обычно используются вместе с мьютексами для
блокировки и ожидания событий.
- Флип-флопы: Используются для синхронизации состояний между потоками, позволяя переключаться между двумя состояниями в зависимости
 от выполнения условий.
- Латчи: Одноразовые синхронизационные барьеры, которые не могут быть сброшены. Они разблокируются, когда определённое количество 
потоков завершает выполнение до достижения латча.

Эти примитивы играют ключевую роль в управлении доступом к ресурсам и координации действий между потоками и процессами в многозадачных 
средах.