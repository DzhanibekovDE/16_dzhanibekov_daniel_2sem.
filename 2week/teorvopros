Ответы на контрольные вопросы:

*(5Б)  Какие классы реализует/использует библиотека crono.
1. Библиотека crono реализует классы duration, time_point, clock и другие для работы со временем и 
временными интервалами в C++. Она предоставляет удобные средства для работы с временем, измерения 
временных интервалов и управления временными точками.

*(5Б)  Категории итераторов, доступные операции.
2. Категории итераторов в C++:
   - Input Iterator: позволяет только однократное считывание значений из контейнера.
   - Output Iterator: позволяет только однократную запись значений в контейнер.
   - Forward Iterator: поддерживает перемещение только вперед по контейнеру.
   - Bidirectional Iterator: поддерживает перемещение как вперед, так и назад по контейнеру.
   - Random Access Iterator: позволяет произвольный доступ к элементам контейнера.

*(5Б)  Категории итераторов доступные для различных контейнеров.
3. Контейнеры в C++ имеют различные категории итераторов в зависимости от своих особенностей:
   - Array и Vector поддерживают Random Access Iterator.
   - List и Forward List поддерживают Bidirectional Iterator.
   - Set и Map поддерживают Bidirectional Iterator.
   - Unordered Set и Unordered Map поддерживают Input Iterator.

*(5Б)  Коротко опишите преимущества и недостатки рассмотренных контейнеров, 
для каждого контейнера приведите примеры задачи, подходящей.
4. Преимущества и недостатки контейнеров:
   - Array: преимущество - быстрый доступ к элементам по индексу; недостаток - фиксированный размер.
    Пример задачи: хранение координат точек в трехмерном пространстве.
   - Vector: преимущество - динамическое изменение размера; недостаток - возможно перераспределение памяти.
    Пример задачи: хранение списка студентов в группе.
   - List: преимущество - быстрая вставка/удаление элементов; недостаток - медленный доступ к элементам по индексу. 
   Пример задачи: реализация двусвязного списка.

*(5Б)  Какие адаптеры контейнеров доступны для различных контейнеров? Почему?  
5. Адаптеры контейнеров в C++:
   - Stack: адаптер для работы с контейнером, реализующий структуру данных стек. Поддерживает операции push, pop, top.
   - Queue: адаптер для работы с контейнером, реализующий структуру данных очередь. Поддерживает операции push, pop, front, back.
   - Priority Queue: адаптер для работы с контейнером, реализующий структуру данных очередь с приоритетом. Поддерживает операции push, pop, top. 

Адаптеры контейнеров используются для предоставления интерфейса структур данных стека, очереди или очереди с приоритетом
 поверх различных контейнеров (например, vector, deque). Это позволяет легко изменять реализацию структуры данных без изменения 
 кода, который использует эту структуру.