## Чем отличаются функциональные объекты от функций и лямбда-выражений? (5Б)


Функциональные объекты в C++ - это объекты классов, у которых 
перегружен оператор вызова функции operator(). Это позволяет использовать
 экземпляры этих классов так, как если бы они были функциями.

Функции в C++ являются базовыми строительными блоками для выполнения
 кода. Они определяются с помощью конкретного типа возвращаемого 
 значения, имени функции и набора параметров.

Лямбда-выражения - это анонимные функции, которые могут быть определены
 в выражениях и могут захватывать переменные из области видимости для 
 использования внутри тела лямбда-выражения.

Основные отличия:

-Функторы могут хранить состояние. В класс, реализующий функтор, можно
 добавить поля для хранения данных, которые могут изменяться при каждом вызове operator().

-Функции не хранят состояние между вызовами и являются стандартным способом определения поведения в C++.

-Лямбда-выражения могут захватывать и использовать переменные из окружающей их области 
видимости, что делает их мощным средством для создания анонимных функций, способных хранить состояние.


## Для чего нужны итераторы (5Б)


Итераторы в C++ представляют собой объекты, позволяющие последовательно 
обходить элементы контейнеров STL (Стандартной библиотеки шаблонов). Они абстрагируют
детали реализации контейнеров, предоставляя единообразный интерфейс для доступа к элементам
и их перебора. С итераторами можно выполнять такие операции, как инкрементирование, 
декрементирование, доступ к элементу, на который указывает итератор, и сравнение итераторов.



## Не действительные итераторы (5Б)
Не действительные, или "невалидные", итераторы - это итераторы, которые не указывают на 
допустимый элемент контейнера. Итератор может стать невалидным по разным причинам, например:

-После модификации контейнера (добавления, удаления элементов), которая инвалидирует существующие итераторы.
-Если итератор был инициализирован некорректно или не был инициализирован вовсе.
-Если итератор был инкрементирован или декрементирован за границы контейнера.

Использование невалидных итераторов может привести к неопределённому поведению программы.



## Адаптеры итераторов (10Б)
Адаптеры итераторов в C++ - это специальные классы, которые модифицируют поведение обычных
 итераторов, предоставляя дополнительные возможности или изменяя их поведение для специфических 
 задач. Например, адаптеры могут обратить направление обхода контейнера, предоставить доступ
 только к определенным элементам контейнера или изменить тип возвращаемых значений.