### Что есть состояние гонки и к чему оно может привести (5Б)

Состояние гонки (race condition) возникает, когда два или более процесса или потока в системе пытаются 
одновременно изменить общие данные, и исход операций зависит от порядка их выполнения. Это может привести к:

- Непредсказуемому поведению: Результат выполнения программы может изменяться при каждом запуске.
- Ошибкам данных: Некорректное обновление данных из-за наложения операций может привести к потере или искажению данных.
- Сбоям в системе: Неправильная обработка данных может вызвать сбои или остановку работы системы.

### Как используются мьютексы и условные переменные (5Б)

Мьютексы используются для обеспечения взаимоисключения, т.е. доступ к общим ресурсам разрешается только одному 
потоку за раз. Это предотвращает состояние гонки и гарантирует согласованность данных.

Условные переменные используются для синхронизации потоков. Они позволяют потокам приостанавливать выполнение до 
наступления определённого условия. Обычно используются совместно с мьютексами для координации работы потоков, 
например, для ожидания доступности ресурса.

### На что влияет выбор гранулярности блокировки (5Б)

Гранулярность блокировки влияет на производительность и масштабируемость многопоточных приложений:

- Крупногранулярная блокировка (например, один мьютекс на все данные) проста в реализации, но может снижать производительность 
из-за высокой степени конкуренции и меньшей параллельности.
- Мелкогранулярная блокировка (например, отдельный мьютекс для каждого элемента данных) увеличивает параллельность, но может 
привести к большему количеству накладных расходов и сложности управления блокировками.

### Когда возникает взаимоблокировка и как ее предотвратить (5Б)

Взаимоблокировка (deadlock) возникает, когда два или более потоков вечно ожидают ресурсы, захваченные друг другом. Для 
предотвращения взаимоблокировок можно использовать следующие подходы:

- Избегать нескольких блокировок: Минимизировать количество мьютексов, используемых одновременно.
- Порядок захвата ресурсов: Всегда захватывать ресурсы в одном и том же порядке.
- Использование тайм-аутов: Установление тайм-аутов на операции захвата, чтобы в случае неудачи освободить все ресурсы и 
попробовать снова.
- Обнаружение взаимоблокировек: Алгоритмы обнаружения и восстановления после взаимоблокировок.

### Что есть атомарная операция и атомарный тип данных (5Б)

Атомарная операция — это операция, которая гарантированно выполняется без прерывания другими потоками, что обеспечивает корректное 
выполнение в многопоточной среде без использования мьютексов.

Атомарный тип данных в C++ — это специальный тип, предоставляемый библиотекой `<atomic>`, который поддерживает атомарные операции. 
Эти типы используются для безопасной работы с данными в многопоточных программах, обеспечивая безопасный доступ и модификацию данных 
без риска состояния гонки.